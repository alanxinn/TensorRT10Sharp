using System;
using TensorRTSharp;
using System.IO;
using System.Linq;

namespace TensorRTSharp.Examples
{
    /// <summary>
    /// TensorRT10Sharp 基础使用示例
    /// </summary>
    public class BasicExample
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("==============================================");
            Console.WriteLine("TensorRT10Sharp C# 基础示例");
            Console.WriteLine("==============================================");
            Console.WriteLine();

            try
            {
                // 检查是否有引擎文件参数
                string enginePath = "yolo11n.engine";
                
                Console.WriteLine($"[INFO] 尝试加载引擎文件: {enginePath}");
                
                if (!File.Exists(enginePath))
                {
                    Console.WriteLine($"[WARNING] 引擎文件不存在: {enginePath}");
                    
                    // 尝试寻找对应的 ONNX 文件
                    string onnxPath = Path.ChangeExtension(enginePath, ".onnx");
                    if (File.Exists(onnxPath))
                    {
                        Console.WriteLine($"[INFO] 找到 ONNX 文件: {onnxPath}");
                        Console.WriteLine("[INFO] 正在转换 ONNX 模型为 TensorRT 引擎...");
                        
                        if (ConvertOnnxToEngine(onnxPath, enginePath))
                        {
                            Console.WriteLine($"[SUCCESS] 成功转换为引擎文件: {enginePath}");
                        }
                        else
                        {
                            Console.WriteLine("[ERROR] ONNX 转换失败");
                            Console.WriteLine("[INFO] 继续演示 TensorRT10Sharp 基本功能...");
                            Console.WriteLine();
                            
                            // 演示基本API
                            DemonstrateBasicAPI();
                            return;
                        }
                    }
                    else
                    {
                        Console.WriteLine($"[WARNING] 也未找到 ONNX 文件: {onnxPath}");
                        Console.WriteLine("[INFO] 请确保引擎文件或 ONNX 文件存在");
                        Console.WriteLine("[INFO] 或使用以下命令手动转换ONNX模型:");
                        Console.WriteLine("       trtexec --onnx=model.onnx --saveEngine=model.engine --fp16");
                        Console.WriteLine();
                        Console.WriteLine("[INFO] 继续演示 TensorRT10Sharp 基本功能...");
                        Console.WriteLine();
                        
                        // 演示基本API
                        DemonstrateBasicAPI();
                        return;
                    }
                }

                // 创建推理引擎
                using var infer = new Nvinfer(enginePath);
                
                Console.WriteLine("[SUCCESS] TensorRT 引擎加载成功！");
                Console.WriteLine();
                
                // 显示模型信息
                ShowModelInfo(infer);
                
                Console.WriteLine();
                Console.WriteLine("[INFO] 示例运行完成！");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ERROR] 运行时错误: {ex.Message}");
                Console.WriteLine($"[DEBUG] 详细信息: {ex}");
            }
            
            Console.WriteLine();
            Console.WriteLine("按任意键退出...");
            Console.ReadKey();
        }
        
        /// <summary>
        /// 将 ONNX 模型转换为 TensorRT 引擎
        /// </summary>
        /// <param name="onnxPath">ONNX 文件路径</param>
        /// <param name="enginePath">输出引擎文件路径</param>
        /// <returns>转换是否成功</returns>
        private static bool ConvertOnnxToEngine(string onnxPath, string enginePath)
        {
            try
            {
                Console.WriteLine($"[INFO] 开始转换: {onnxPath} -> {enginePath}");
                Console.WriteLine("[INFO] 使用 TensorRT10Sharp 进行 ONNX 转换...");
                Console.WriteLine("[WARNING] 这可能需要几分钟时间，请耐心等待...");
                
                // 使用 TensorRT10Sharp 的静态方法进行转换
                // 设置内存大小为 1GB (1024 MB)
                bool success = Nvinfer.ConvertOnnxToEngine(onnxPath, 1024);
                
                if (success)
                {
                    // 检查转换后的引擎文件是否存在
                    // TensorRT10Sharp 会自动生成 .engine 文件
                    string autoGeneratedEngine = Path.ChangeExtension(onnxPath, ".engine");
                    
                    if (File.Exists(autoGeneratedEngine))
                    {
                        // 如果目标路径不同，则移动文件
                        if (!string.Equals(autoGeneratedEngine, enginePath, StringComparison.OrdinalIgnoreCase))
                        {
                            if (File.Exists(enginePath))
                            {
                                File.Delete(enginePath);
                            }
                            File.Move(autoGeneratedEngine, enginePath);
                        }
                        
                        Console.WriteLine($"[SUCCESS] 引擎文件已保存: {enginePath}");
                        Console.WriteLine($"[INFO] 文件大小: {new FileInfo(enginePath).Length / (1024 * 1024)} MB");
                        return true;
                    }
                    else
                    {
                        Console.WriteLine("[WARNING] 转换成功但未找到引擎文件");
                        return false;
                    }
                }
                else
                {
                    Console.WriteLine("[ERROR] ONNX 转换失败");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ERROR] ONNX 转换过程中发生异常: {ex.Message}");
                Console.WriteLine($"[DEBUG] 详细信息: {ex}");
                return false;
            }
        }
        
        /// <summary>
        /// 演示基本API功能
        /// </summary>
        private static void DemonstrateBasicAPI()
        {
            Console.WriteLine("=== TensorRT10Sharp 基本API演示 ===");
            Console.WriteLine();
            
            // 演示 Dims 结构体
            var dims = new Dims();
            dims.SetDimension(0, 1);    // batch size
            dims.SetDimension(1, 3);    // channels
            dims.SetDimension(2, 640);  // height
            dims.SetDimension(3, 640);  // width
            dims.nbDims = 4;
            
            Console.WriteLine($"[INFO] 创建维度信息: [{dims.GetDimension(0)}, {dims.GetDimension(1)}, {dims.GetDimension(2)}, {dims.GetDimension(3)}]");
            Console.WriteLine($"[INFO] 元素总数: {dims.GetElementCount()}");
            Console.WriteLine($"[INFO] 维度数量: {dims.nbDims}");
            Console.WriteLine();
            
            Console.WriteLine("[INFO] TensorRT10Sharp 基本功能演示完成");
        }
        
        /// <summary>
        /// 显示模型信息
        /// </summary>
        /// <param name="infer">推理引擎</param>
        private static void ShowModelInfo(Nvinfer infer)
        {
            Console.WriteLine("=== 模型信息 ===");
            
            // 获取输入输出数量
            int inputCount = infer.GetInputCount();
            int outputCount = infer.GetOutputCount();
            
            Console.WriteLine($"输入数量: {inputCount}");
            Console.WriteLine($"输出数量: {outputCount}");
            Console.WriteLine();
            
            // 显示输入信息
            Console.WriteLine("输入层信息:");
            for (int i = 0; i < inputCount; i++)
            {
                string inputName = infer.GetInputName(i);
                var inputDims = infer.GetBindingDimensions(inputName);
                
                Console.WriteLine($"  [{i}] 名称: {inputName}");
                Console.WriteLine($"      维度: [{string.Join(", ", Enumerable.Range(0, inputDims.nbDims).Select(j => inputDims.GetDimension(j)))}]");
                Console.WriteLine($"      元素数: {inputDims.GetElementCount()}");
            }
            
            Console.WriteLine();
            
            // 显示输出信息
            Console.WriteLine("输出层信息:");
            for (int i = 0; i < outputCount; i++)
            {
                string outputName = infer.GetOutputName(i);
                var outputDims = infer.GetBindingDimensions(outputName);
                
                Console.WriteLine($"  [{i}] 名称: {outputName}");
                Console.WriteLine($"      维度: [{string.Join(", ", Enumerable.Range(0, outputDims.nbDims).Select(j => outputDims.GetDimension(j)))}]");
                Console.WriteLine($"      元素数: {outputDims.GetElementCount()}");
            }
        }
    }
} 